# -*- coding: utf-8 -*-
"""code.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cjhdsEgSYplNYaT-rPVZuUers3g8Q1Gz
"""



import cv2
import torch
import torchvision.transforms as T
from torchvision.models.detection import fasterrcnn_resnet50_fpn
from collections import OrderedDict
from google.colab.patches import cv2_imshow




# Load a pre-trained Faster R-CNN model
model = fasterrcnn_resnet50_fpn(pretrained=True)
model.eval()

# Define classes for COCO dataset (including "car" class)
COCO_INSTANCE_CATEGORY_NAMES = [
    '__background__', 'person', 'bicycle', 'car', 'motorcycle', 'airplane',
    'bus', 'train', 'truck', 'boat', 'traffic light', 'fire hydrant',
    'N/A', 'stop sign', 'parking meter', 'bench', 'bird', 'cat', 'dog',
    'horse', 'sheep', 'cow', 'elephant', 'bear', 'zebra', 'giraffe', 'N/A',
    'backpack', 'umbrella', 'N/A', 'handbag', 'tie', 'suitcase', 'frisbee',
    'skis', 'snowboard', 'sports ball', 'kite', 'baseball bat',
    'baseball glove', 'skateboard', 'surfboard', 'tennis racket', 'bottle',
    'N/A', 'wine glass', 'cup', 'fork', 'knife', 'spoon', 'bowl', 'banana',
    'apple', 'sandwich', 'orange', 'broccoli', 'carrot', 'hot dog', 'pizza',
    'donut', 'cake', 'chair', 'couch', 'potted plant', 'bed', 'N/A',
    'dining table', 'N/A', 'tv', 'laptop', 'mouse', 'remote', 'keyboard',
    'cell phone', 'microwave', 'oven', 'toaster', 'sink', 'refrigerator', 'N/A',
    'book', 'clock', 'vase', 'scissors', 'teddy bear', 'hair drier',
    'toothbrush'
]

# Load the COCO class labels and map them to indices
COCO_LABELS = {k: v for v, k in enumerate(COCO_INSTANCE_CATEGORY_NAMES)}

# Function to detect vehicles in a frame and draw bounding boxes with labels
def detect_vehicle(frame):
    # Preprocess the frame
    transform = T.Compose([T.ToPILImage(), T.ToTensor()])
    input_image = transform(frame)

    # Perform object detection
    with torch.no_grad():
        predictions = model([input_image])

    # Extract bounding box coordinates, labels, and scores
    boxes = predictions[0]['boxes'].cpu().numpy()
    labels = predictions[0]['labels'].cpu().numpy()
    scores = predictions[0]['scores'].cpu().numpy()

    # Draw bounding boxes with labels
    for box, label, score in zip(boxes, labels, scores):
        if COCO_INSTANCE_CATEGORY_NAMES[label] == 'car' and score > 0.5:
            x1, y1, x2, y2 = map(int, box)
            cv2.rectangle(frame, (x1, y1), (x2, y2), (0, 255, 0), 2)
            label_text = f'{COCO_INSTANCE_CATEGORY_NAMES[label]}: {score:.2f}'
            cv2.putText(frame, label_text, (x1, y1 - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)

    return frame

# Open a video capture from your webcam
cap = cv2.VideoCapture('/content/drive/MyDrive/traffic_video.avi')

# Get the frame width, height, and frame rate
frame_width = int(cap.get(3))
frame_height = int(cap.get(4))
frame_rate = 30

# Define the codec and create a VideoWriter object to save the output
fourcc = cv2.VideoWriter_fourcc(*'XVID')
output = cv2.VideoWriter('output.avi', fourcc, frame_rate, (frame_width, frame_height))

while True:
    # Read a frame from the webcam
    ret, frame = cap.read()

    if not ret:
        break

    # Detect vehicles in the frame
    frame_with_detection = detect_vehicle(frame)

    # Write the frame to the output video
    output.write(frame_with_detection)

    # Display the frame with detections
    #cv2_imshow(frame_with_detection)

    # Break the loop when 'q' key is pressed
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Release the video capture, video writer, and close the window
cap.release()
output.release()
cv2.destroyAllWindows()